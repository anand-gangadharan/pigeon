AWSTemplateFormatVersion: '2010-09-09'
Description: A Lambda
Parameters:
  projName:
    Type: String
    Default: Pigeon
  apiGatewayStageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: call

Resources:
  
  helloLM:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${projName}SimpleDynamoService' 
      Handler: src/handler.handler
      Runtime: nodejs18.x
      Role: !GetAtt MyLambdaRole.Arn
      CodeUri: ../
      #Code:
      #    S3Bucket: build-lambda-functions
      #    S3Key: SimpleLambdaCode
      TracingConfig:
        Mode: Active
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${projName}LambdaRole' 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  PigeonLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName:  !Sub '${projName}DynamoDBAcccessPolicy'
      Description: Managed Policy to attach to MyTestRole Role
      Path: /
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${projName}SimpleDynamoService:*
      Roles: 
        - !Ref MyLambdaRole
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${projName}SimpleDynamoService'
      RetentionInDays: 3

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub '${projName}ApiGW'
  
  itemResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: items

  itemIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref itemResource
      RestApiId: !Ref apiGateway
      PathPart: '{itemId}'

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        RequestParameters:
          integration.request.path.item: method.request.path.item
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt helloLM.Arn
      ResourceId: !Ref itemIdResource
      RestApiId: !Ref apiGateway
      OperationName: /items
      RequestParameters:
        method.request.path.item: false
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod  
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref helloLM
      Principal: apigateway.amazonaws.com

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${projName}_items' 
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: N
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
